@page "/ChangePass"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navMgr

@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!isPasswordConfirmed)
        {
            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="currentPassword" />
            </div>
            <button type="button" class="btn btn-primary" @onclick="PasswordConf">Confirm current Password</button>
            if(errorMessage){
                <p>
                    The password does not match
                </p>
            }
        }
        else
        {
            <div class="form-group">
                <label for="password">New Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
            </div>
            <button type="submit" class="btn btn-primary">Accept Changes</button>
        }
    </EditForm>
}

@code {
    private User? user;
    private string currentPassword = "";
    private bool isPasswordConfirmed = false;
    private bool errorMessage = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity.IsAuthenticated)
        {
            var userIdClaim = currentUser.Claims.FirstOrDefault(claim => claim.Type.Equals("Id"))?.Value;
            if (!string.IsNullOrEmpty(userIdClaim))
            {
                var response = await Http.GetAsync($"/api/Hotels/user-info/{userIdClaim}");
                if (response.IsSuccessStatusCode)
                {
                    user = await response.Content.ReadFromJsonAsync<User>();
                }
                else
                {
                    Console.WriteLine($"Error fetching user info: {response.ReasonPhrase}");
                }
            }
        }
    }

    private async Task PasswordConf(){
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        var nuPass = "";

        if (currentUser.Identity.IsAuthenticated)
        {
            var userIdClaim = currentUser.Claims.FirstOrDefault(claim => claim.Type.Equals("Id"))?.Value;
            if (!string.IsNullOrEmpty(userIdClaim))
            {
                var response = await Http.GetAsync($"/api/Hotels/get-current-password/{userIdClaim}");
                if (response.IsSuccessStatusCode)
                {
                    nuPass = await response.Content.ReadAsStringAsync();              
                }
                else
                {
                    Console.WriteLine($"bum: {response.ReasonPhrase}");
                }
            }
            else
            {
                Console.WriteLine("User ID claim is missing.");
            }
        }
        if(nuPass.Equals(currentPassword)){
            isPasswordConfirmed = true;

        }
        else{
            errorMessage = true;
        }
    

    }

   private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;

        if (currentUser.Identity.IsAuthenticated)
        {
            var userIdClaim = currentUser.Claims.FirstOrDefault(claim => claim.Type.Equals("Id"))?.Value;
            var response = await Http.PutAsJsonAsync($"/api/hotels/user-info/{userIdClaim}", user);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User information updated successfully.");
            }
            else
            {
                Console.WriteLine($"Error updating user info: {response.ReasonPhrase}");
            }
        }
        navMgr.NavigateTo("/userinfo");
    }

    public class User
    {
        public int Id { get; set; }
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
        public string Email { get; set; } = "";
        public string FullName { get; set; } = "";
        public DateTime Birthday { get; set; }
        public string Domain { get; set; } = "";
        public string Role { get; set; } = "";
        public int SecurityLevel { get; set; }
    }
}