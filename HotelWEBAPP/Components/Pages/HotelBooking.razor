@page "/HotelBooking"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IConfiguration Configuration

<h3 class="text-center my-4">Explore Hotels by Country</h3>

<div class="container">
    <!-- Search and Filter Section -->
    <div class="row justify-content-center">
        <input type="text" class="form-control w-50" @oninput="OnSearchInput" placeholder="Search countries..." />
        @if (!string.IsNullOrEmpty(searchQuery) && filteredCountries.Any())
        {
            <ul class="list-group position-absolute w-50" style="max-height: 200px; overflow-y: auto; z-index: 1000;">
                @foreach (var country in filteredCountries)
                {
                    <li class="list-group-item list-group-item-action" @onclick="@(() => CountrySelected(country))">@country</li>
                }
            </ul>
        }
    </div>

    <!-- Date and People Inputs -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-4">
            <label for="checkInDate">Check-in Date:</label>
            <input type="date" id="checkInDate" @bind="checkInDate" min="@todayString" class="form-control" />
        </div>
        <div class="col-md-4">
            <label for="checkOutDate">Check-out Date:</label>
            <input type="date" id="checkOutDate" @bind="checkOutDate" min="@todayString" class="form-control" />
        </div>
        <div class="col-md-4">
            <label for="numberOfPeople">Number of People:</label>
            <input type="number" id="numberOfPeople" @bind="numberOfPeople" min="1" class="form-control" placeholder="Number of people" />
        </div>
    </div>

    <!-- Hotel Display Section -->
    <div class="row justify-content-center mt-4">
        @if (isLoading)
        {
            <div class="text-primary">Loading...</div>
        }
        else if (selectedHotels != null)
        {
            <h4 class="text-center w-100">Hotels in @selectedCountry:</h4>
            <div>
                @foreach (var hotel in selectedHotels)
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <strong>@hotel.Name</strong><br />
                            <em>@hotel.Description</em><br />
                            <img src="@(@Configuration["WebAPIBaseAddress"] + @hotel.ImageUrl)" alt="@hotel.Name" width="150" /><br /><br />
                        </div>
                        <AuthorizeView>
                            <Authorized>
                                <button class="btn btn-primary" @onclick="() => BookHotel(hotel)">Book</button>
                            </Authorized>
                            <NotAuthorized>
                                <p>You are not logged in!</p>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private string selectedCountry;
    private List<Hotel> selectedHotels;
    private bool isLoading = false;
    private string searchQuery = string.Empty;
    private List<Hotel> allHotels = new List<Hotel>();
    private DateTime checkInDate;
    private DateTime checkOutDate;
    private int numberOfPeople = 1; // Default to 1 person
    private string todayString = DateTime.Now.ToString("yyyy-MM-dd");
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allHotels = await Http.GetFromJsonAsync<List<Hotel>>("/api/hotels");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching hotels: {ex.Message}");
        }
    }

    private List<string> filteredCountries => allHotels?
        .Select(h => h.Country)
        .Distinct()
        .Where(c => c.StartsWith(searchQuery, StringComparison.OrdinalIgnoreCase))
        .ToList() ?? new List<string>();

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private async Task LoadHotels(string country)
    {
        selectedCountry = country;
        selectedHotels = allHotels.Where(h => h.Country == country).ToList();
        isLoading = false;
        StateHasChanged();
    }

    private async Task CountrySelected(string country)
    {
        isLoading = true;
        await LoadHotels(country);
    }

    private async Task BookHotel(Hotel hotel)
{
    if (checkInDate == DateTime.MinValue || checkOutDate == DateTime.MinValue || checkInDate >= checkOutDate)
    {
        Console.WriteLine("Validation failed: Invalid dates.");
        return;
    }

    var booking = new Booking
    {
        Hotel = hotel.Name,
        CheckIn = checkInDate,
        CheckOut = checkOutDate,
    };

    try
    {
        Console.WriteLine($"Attempting to book: Hotel = {booking.Hotel}, CheckIn = {booking.CheckIn}, CheckOut = {booking.CheckOut}");
        var response = await Http.PostAsJsonAsync("api/hotels/add-booking", booking);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Booking successful.");
        }
        else
        {
            Console.WriteLine($"Booking failed. Response: {response.StatusCode} {response.ReasonPhrase}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error occurred: {ex.Message}");
    }
}

    public class Hotel
    {
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public string Description { get; set; }
        public string Country { get; set; }
    }

    public class Booking
    {
        public string Hotel { get; set; }
        public DateTime CheckIn { get; set; }
        public DateTime CheckOut { get; set; }
    }
}
