@page "/login"
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<h3>Login3</h3>

<EditForm Model="loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="loginModel.Email"  />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();
    private async Task HandleLogin()
    {
        Console.WriteLine("HandleLogin called");
        Console.WriteLine($"Email: {loginModel.Email}, Password: {loginModel.Password}");
        if (string.IsNullOrEmpty(loginModel.Email) || string.IsNullOrEmpty(loginModel.Password))
        {
            Console.WriteLine("Email or Password is empty");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5031/api/auth/login", loginModel);
            Console.WriteLine($"Response status code: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await LocalStorage.SetItemAsync("authToken", token);
                Navigation.NavigateTo("/");
                Console.WriteLine("Login successful");
            }
            else
            {
                Console.WriteLine("Invalid login attempt");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}